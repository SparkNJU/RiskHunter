================================================================================File Name: establishUserTable.sqlFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\establishUserTable.sqlLine Count: 23File Content:-- 创建 riskhunter 数据库
CREATE DATABASE IF NOT EXISTS riskhunter;

-- 使用 riskhunter 数据库
USE riskhunter;

-- 创建 user 表
CREATE TABLE IF NOT EXISTS `user` (
  `id` INT NOT NULL,
  `address` VARCHAR(255) NULL,
  `name` VARCHAR(255) NULL,
  `password` VARCHAR(255) NULL,
  `phone` VARCHAR(255) NULL,
  `role` INT NULL,
  PRIMARY KEY (`id`)
);
-- 插入数据
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (1, 'China, Nanjing, Gulou district', 'seecoder', '123456', '13545687101', 1);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (2, null, 'seecoder', '123456789', '13333333333', 2);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (3, null, 'CEO', '123456', '13444444444', 3);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (4, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345678', 4);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (5, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345677', 4);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (6, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345674', 1);================================================================================File Name: establishTable.sqlFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\establishTable.sqlLine Count: 58File Content:CREATE TABLE risk_signal(
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    time DATETIME NOT NULL,
    emp DOUBLE NOT NULL,
    exchange_rate DOUBLE NOT NULL,
    interest_rate DOUBLE NOT NULL,
    fx_reserves DOUBLE NOT NULL,
    analysis VARCHAR(5000) NOT NULL,
    advice VARCHAR(5000) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

use riskhunter;
INSERT INTO risk_signal (time, emp, exchange_rate, interest_rate, fx_reserves, analysis, advice) VALUES
('2023-01-01 00:00:00', 100.5, 1.12, 2.5, 500.0, 'Initial analysis: Stable economy.', 'Monitor inflation closely.'),
('2023-01-15 00:00:00', 101.0, 1.11, 2.6, 505.0, 'Slight increase in EMP, exchange rate stable.', 'Consider gradual interest rate adjustments.'),
('2023-02-01 00:00:00', 101.5, 1.10, 2.7, 510.0, 'EMP increasing, exchange rate decreasing.', 'Evaluate impact of currency fluctuations.'),
('2023-02-15 00:00:00', 102.0, 1.09, 2.8, 515.0, 'EMP continues to rise, exchange rate decline accelerates.', 'Implement measures to stabilize the currency.'),
('2023-03-01 00:00:00', 102.5, 1.08, 2.9, 520.0, 'Further increase in EMP, exchange rate under pressure.', 'Strengthen FX reserves and consider capital controls.'),
('2023-03-15 00:00:00', 103.0, 1.07, 3.0, 525.0, 'Significant increase in EMP, exchange rate volatility.', 'Implement aggressive monetary tightening.'),
('2023-04-01 00:00:00', 103.5, 1.06, 3.1, 530.0, 'EMP nearing critical level, exchange rate instability.', 'Urgent action required to restore confidence.'),
('2023-04-15 00:00:00', 104.0, 1.05, 3.2, 535.0, 'EMP surpasses critical level, exchange rate collapse imminent.', 'Intervene heavily in the FX market.'),
('2023-05-01 00:00:00', 104.5, 1.04, 3.3, 540.0, 'EMP remains high, exchange rate continues downward trend.', 'Seek external assistance if necessary.'),
('2023-05-15 00:00:00', 105.0, 1.03, 3.4, 545.0, 'EMP at peak, exchange rate severely depreciated.', 'Implement structural reforms to address underlying issues.'),
('2023-06-01 00:00:00', 104.8, 1.035, 3.4, 540.0, 'Slight decrease in EMP, exchange rate showing signs of stability.', 'Continue monitoring closely and maintain cautious stance.'),
('2023-06-15 00:00:00', 104.5, 1.04, 3.3, 535.0, 'EMP decreasing gradually, exchange rate recovering slightly.', 'Begin easing monetary policy cautiously.'),
('2023-07-01 00:00:00', 104.0, 1.05, 3.2, 530.0, 'EMP continues to decline, exchange rate stabilizing.', 'Focus on attracting foreign investment.'),
('2023-07-15 00:00:00', 103.5, 1.06, 3.1, 525.0, 'EMP approaching normal levels, exchange rate relatively stable.', 'Promote exports to improve trade balance.'),
('2023-08-01 00:00:00', 103.0, 1.07, 3.0, 520.0, 'EMP within acceptable range, exchange rate under control.', 'Improve infrastructure to enhance competitiveness.'),
('2023-08-15 00:00:00', 102.5, 1.08, 2.9, 515.0, 'EMP well below previous peak, exchange rate strengthening.', 'Invest in education and training.'),
('2023-09-01 00:00:00', 102.0, 1.09, 2.8, 510.0, 'Economy showing signs of recovery, exchange rate appreciation.', 'Reduce government debt to improve fiscal sustainability.'),
('2023-09-15 00:00:00', 101.5, 1.10, 2.7, 505.0, 'Economic outlook positive, exchange rate remains strong.', 'Strengthen regulatory framework to prevent future crises.'),
('2023-10-01 00:00:00', 101.0, 1.11, 2.6, 500.0, 'Stable economic conditions, exchange rate holding steady.', 'Diversify the economy to reduce vulnerability to shocks.'),
('2023-10-15 00:00:00', 100.5, 1.12, 2.5, 495.0, 'Economy returning to normal, exchange rate stabilizing.', 'Maintain prudent fiscal and monetary policies.');


-- 创建 riskhunter 数据库
CREATE DATABASE IF NOT EXISTS riskhunter;

-- 使用 riskhunter 数据库
USE riskhunter;

-- 创建 user 表
CREATE TABLE IF NOT EXISTS `user` (
                                      `id` INT NOT NULL,
                                      `address` VARCHAR(255) NULL,
                                      `name` VARCHAR(255) NULL,
                                      `password` VARCHAR(255) NULL,
                                      `phone` VARCHAR(255) NULL,
                                      `role` INT NULL,
                                      PRIMARY KEY (`id`)
);
-- 插入数据
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (1, 'China, Nanjing, Gulou district', 'seecoder', '123456', '13545687101', 1);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (2, null, 'seecoder', '123456789', '13333333333', 2);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (3, null, 'CEO', '123456', '13444444444', 3);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (4, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345678', 4);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (5, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345677', 4);
INSERT INTO riskhunter.user (id, address, name, password, phone, role) VALUES (6, 'China, Nanjing, Qixia district', '软件工程僵尸', '123456', '13512345674', 1);================================================================================File Name: pom.xmlFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\pom.xmlLine Count: 94File Content:<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.github.SparkNJU</groupId>
	<artifactId>RiskHunter</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>RiskHunter</name>
	<description>2025花旗杯</description>
	<properties>
		<java.version>8</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>


		<!-- MyBatis-Plus -->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>3.5.3.1</version>  <!--  确保这个版本号是正确的 -->
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>8.0.31</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>3.10.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
================================================================================File Name: RiskHunterApplication.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\RiskHunterApplication.javaLine Count: 13File Content:package com.RiskHunter;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class RiskHunterApplication {

	public static void main(String[] args) {
		SpringApplication.run(RiskHunterApplication.class, args);
	}

}
================================================================================File Name: CorsFilter.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\configure\CorsFilter.javaLine Count: 54File Content:package com.RiskHunter.configure;

import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * @Author: DingXiaoyu
 * @Date: 19:17 2023/12/5
 * 在SpringBoot过滤器中配置跨域，
 * 跨域配置不能和拦截器写一起，
 * 会造成冲突，
 * 需要在过滤器中配置跨域，
 * 过滤器在拦截器前进行。
 * 在“Access-Control-Allow-Headers”中，
 * 需要添加上token，
 * 因为前端要传输token到后端，不能过滤掉。
*/
@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
@WebFilter("/*")
public class CorsFilter implements Filter {

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader("Access-Control-Allow-Origin", "*");
        response.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, DELETE");
        response.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type, token");
        response.setHeader("Access-Control-Max-Age", "3600");
        if ("OPTIONS".equalsIgnoreCase(((HttpServletRequest) req).getMethod())){
            response.setStatus(200);
        }else {
            chain.doFilter(req, res);
        }
    }

    @Override
    public void init(FilterConfig filterConfig) {
    }

}
================================================================================File Name: LoginInterceptor.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\configure\LoginInterceptor.javaLine Count: 39File Content:package com.RiskHunter.configure;

import com.RiskHunter.exception.RiskHunterException;
import com.RiskHunter.util.TokenUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * @Author: DingXiaoyu
 * @Date: 0:17 2023/11/26
 * 这个类定制了一个登录的拦截器，
 * SpringBoot的拦截器标准为HandlerInterceptor接口，
 * 这个类实现了这个接口，表示是SpringBoot标准下的，
 * 在preHandle方法中，通过获取请求头Header中的token，
 * 判断了token是否合法，如果不合法则抛异常，
 * 合法则将用户信息存储到request的session中。
*/
@Component
public class LoginInterceptor implements HandlerInterceptor {

    @Autowired
    TokenUtil tokenUtil;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {
        String token = request.getHeader("token");
        if (token != null && tokenUtil.verifyToken(token)) {
            request.getSession().setAttribute("currentUser",tokenUtil.getUser(token));
            return true;
        }else {
            throw RiskHunterException.notLogin();
        }
    }

}
================================================================================File Name: MyWebMvcConfig.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\configure\MyWebMvcConfig.javaLine Count: 33File Content:package com.RiskHunter.configure;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

/**
 * @Author: DingXiaoyu
 * @Date: 0:17 2023/11/26
 *
 * 这个类实现了WebMvcConfigurer接口，
 * 表示会被SpringBoot接受，
 * 这个类的作用是配置拦截器。
 * addInterceptors方法配置了拦截器，
 * 添加了loginInterceptor作为拦截器，
 * 并且设置除了register和login的所有接口都需要通过该拦截器。
*/
@Configuration
public class MyWebMvcConfig implements WebMvcConfigurer {
    @Autowired
    LoginInterceptor loginInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(loginInterceptor)
                .addPathPatterns("/**")
                .excludePathPatterns("/api/users/register")
                .excludePathPatterns("/api/users/login")
                .order(1);
    }

}
================================================================================File Name: RiskSignalController.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\controller\RiskSignalController.javaLine Count: 130File Content:package com.RiskHunter.controller;/*
 * @date 02/23 18:05
 */

import com.RiskHunter.DTO.RiskSignalQueryDTO;
import com.RiskHunter.po.RiskSignal;
import com.RiskHunter.service.RiskSignalService;
import com.RiskHunter.vo.ResultVO;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import java.time.LocalDateTime;

@RestController
@RequestMapping("/api/risk-signals")
@RequiredArgsConstructor
public class RiskSignalController {
    @Autowired
    private RiskSignalService riskSignalService;

    /**
     * 创建 RiskSignal
     *
     * @param signal RiskSignal 对象，通过 RequestBody 传递
     * @return ResultVO 包含创建的 RiskSignal 对象的 ResultVO
     */
    @PostMapping
    public ResultVO<RiskSignal> create(@RequestBody RiskSignal signal) {
        riskSignalService.save(signal);
        return ResultVO.buildSuccess(signal);
    }

    /**
     * 根据时间范围分页查询 RiskSignal 列表
     *
     * @param startTime  可选，开始时间，LocalDateTime 类型
     * @param endTime    可选，结束时间，LocalDateTime 类型
     * @param page       可选，页码，默认为 1
     * @param size       可选，每页大小，默认为 10
     * @return ResultVO 包含分页 RiskSignal 列表的 ResultVO

     */
    @GetMapping
    public ResultVO<Page<RiskSignal>> list(
            @RequestParam(required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) // 使用 ISO 标准
            LocalDateTime startTime,
            @RequestParam(required = false)
            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) // 使用 ISO 标准
            LocalDateTime endTime,
            @RequestParam(defaultValue = "1") Integer page,
            @RequestParam(defaultValue = "10") Integer size) {
        // 设置默认开始时间为1900年1月1日
        if(startTime == null) {
            startTime = LocalDateTime.of(1900, 1, 1, 0, 0, 0);
        }

        // 设置默认结束时间为当前时间
        if(endTime == null) {
            endTime = LocalDateTime.now();
        }
        return ResultVO.buildSuccess(riskSignalService.getByTimeRange(startTime, endTime, page, size));
    }

    /**
     * 根据 ID 更新 RiskSignal
     *
     * @param id     RiskSignal 的 ID，通过 PathVariable 传递
     * @param signal RiskSignal 对象，包含要更新的信息，通过 RequestBody 传递
     * @return ResultVO 包含更新后的 RiskSignal 对象的 ResultVO
     */
    @PutMapping("/{id}")
    public ResultVO<RiskSignal> update(@PathVariable Long id, @RequestBody RiskSignal signal) {
        signal.setId(id);
        riskSignalService.updateById(signal);
        return ResultVO.buildSuccess(signal);
    }

    /**
     * 根据 ID 删除 RiskSignal
     *
     * @param id RiskSignal 的 ID，通过 PathVariable 传递
     * @return ResultVO 包含操作结果的 ResultVO
     */
    @DeleteMapping("/{id}")
    public ResultVO<Void> delete(@PathVariable Long id) {
        riskSignalService.removeById(id);
        return ResultVO.buildSuccess(null);
    }

    /**
     * 高级查询 RiskSignal 列表
     *
     * @param queryDTO RiskSignalQueryDTO 对象，包含查询条件，通过 RequestBody 传递
     * @return ResultVO 包含分页 RiskSignal 列表的 ResultVO
     * * 前端需要传递的 JSON 格式如下：
     *      *
     *      * {
     *      *   "startTime": "2024-02-23T10:00:00",  // 开始时间，ISO 8601格式的日期时间字符串
     *      *   "endTime": "2024-02-23T18:00:00",    // 结束时间，ISO 8601格式的日期时间字符串
     *      *   "minEmp": 0.5,                       // 最小EMP值，可选
     *      *   "maxEmp": 1.5,                       // 最大EMP值，可选
     *      *   "minExchangeRate": 6.5,              // 最小汇率值，可选
     *      *   "keyword": "风险",                    // 分析内容关键词，可选
     *      *   "page": 1,                           // 页码，默认值为1
     *      *   "size": 10                           // 每页记录数，默认值为10
     *      * }
     *      * 所有字段都是可选的。如果不需要某个条件，可以省略相应的字段或传 null。例如，一个最简单的查询可以是：
     *      *
     *      * {
     *      *   "page": 1,
     *      *   "size": 10
     *      * }
     *      * 或者只按时间范围查询：
     *      *
     *      * {
     *      *   "startTime": "2024-02-23T00:00:00",
     *      *   "endTime": "2024-02-23T23:59:59",
     *      *   "page": 1,
     *      *   "size": 10
     *      * }
     */
    @PostMapping("/search")
    public ResultVO<Page<RiskSignal>> advancedSearch(@RequestBody RiskSignalQueryDTO queryDTO) {
        return ResultVO.buildSuccess(riskSignalService.advancedSearch(queryDTO));
    }
}================================================================================File Name: UserController.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\controller\UserController.javaLine Count: 35File Content:package com.RiskHunter.controller;

import com.RiskHunter.service.UserService;
import com.RiskHunter.vo.ResultVO;
import com.RiskHunter.vo.UserVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    UserService userService;

    @PostMapping("/register")
    public ResultVO<Boolean> register(@RequestBody UserVO userVO){
        return ResultVO.buildSuccess(userService.register(userVO));
    }

    @PostMapping("/login")
    public ResultVO<String> login(@RequestParam("phone") String phone, @RequestParam("password") String password){
        return ResultVO.buildSuccess(userService.login(phone, password));
    }

    @GetMapping
    public ResultVO<UserVO> getInformation(){
        return ResultVO.buildSuccess(userService.getInformation());
    }

    @PostMapping
    public ResultVO<Boolean> updateInformation(@RequestBody UserVO userVO){
        return ResultVO.buildSuccess(userService.updateInformation(userVO));
    }
}
================================================================================File Name: RiskSignalQueryDTO.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\DTO\RiskSignalQueryDTO.javaLine Count: 20File Content:package com.RiskHunter.DTO;/*
 * @date 02/23 18:14
 */

import lombok.Data;

import java.time.LocalDateTime;

// 查询DTO
@Data
public class RiskSignalQueryDTO {
    private LocalDateTime startTime;
    private LocalDateTime endTime;
    private Double minEmp;
    private Double maxEmp;
    private Double minExchangeRate;
    private String keyword;
    private Integer page = 1;
    private Integer size = 10;
}================================================================================File Name: RoleEnum.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\enums\RoleEnum.javaLine Count: 5File Content:package com.RiskHunter.enums;

public enum RoleEnum {
    CUSTOMER,STAFF,MANAGER,CEO;
}
================================================================================File Name: GlobalExceptionHandler.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\exception\GlobalExceptionHandler.javaLine Count: 22File Content:package com.RiskHunter.exception;

import com.RiskHunter.vo.ResultVO;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

/**
 * @Author: DingXiaoyu
 * @Date: 0:26 2023/11/26
 * 这个类能够接住项目中所有抛出的异常，
 * 使用了RestControllerAdvice切面完成，
 * 表示所有异常出现后都会通过这里。
 * 这个类将异常信息封装到ResultVO中进行返回。
*/
@RestControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(value = RiskHunterException.class)
    public ResultVO<String> handleAIExternalException(RiskHunterException e) {
        e.printStackTrace();
        return ResultVO.buildFailure(e.getMessage());
    }
}
================================================================================File Name: RiskHunterException.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\exception\RiskHunterException.javaLine Count: 25File Content:package com.RiskHunter.exception;

/**
 * @Author: DingXiaoyu
 * @Date: 0:26 2023/11/26
 * 你可以在这里自定义Exception
*/
public class RiskHunterException extends RuntimeException{

    public RiskHunterException(String message){
        super(message);
    }
    public static RiskHunterException phoneAlreadyExists(){
        return new RiskHunterException("手机号已经存在!");
    }

    public static RiskHunterException notLogin(){
        return new RiskHunterException("未登录!");
    }

    public static RiskHunterException phoneOrPasswordError(){
        return new RiskHunterException("手机号或密码错误!");
    }

}
================================================================================File Name: RiskSignalMapper.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\Mapper\RiskSignalMapper.javaLine Count: 9File Content:package com.RiskHunter.Mapper;

import com.RiskHunter.po.RiskSignal;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface RiskSignalMapper extends BaseMapper<RiskSignal> {
}
================================================================================File Name: RiskSignal.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\po\RiskSignal.javaLine Count: 31File Content:package com.RiskHunter.po;
/*
 * @date 02/23 17:59
 */

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;
import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;

import javax.persistence.Column;
import java.time.LocalDateTime;
import javax.persistence.Entity;
@Data
@TableName("risk_signal")
public class RiskSignal {
    @TableId(type = IdType.AUTO)
    private Long id;

    @Column(nullable = false, updatable = false)  // 使用 @Column 注解
    private LocalDateTime time;

    private Double emp;
    private Double exchangeRate;
    private Double interestRate;
    private Double fxReserves;
    private String analysis;
    private String advice;
}================================================================================File Name: User.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\po\User.javaLine Count: 54File Content:package com.RiskHunter.po;

import com.RiskHunter.enums.RoleEnum;
import com.RiskHunter.vo.UserVO;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

@Getter
@Setter
@NoArgsConstructor
@Entity
public class User {

    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Id
    @Column(name = "id")
    private Integer id;

    @Basic
    @Column(name = "name")
    private String name;

    @Basic
    @Column(name = "phone")
    private String phone;

    @Basic
    @Column(name = "password")
    private String password;


    @Basic
    @Column(name = "address")
    private String address;

    @Basic
    @Column(name = "role")
    private Integer role;

    public UserVO toVO(){
        UserVO userVO=new UserVO();
        userVO.setId(this.id);
        userVO.setAddress(this.address);
        userVO.setName(this.name);
        userVO.setRole(this.role);
        userVO.setPhone(this.phone);
        userVO.setPassword(this.password);
        return userVO;
    }
}
================================================================================File Name: UserRepository.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\repository\UserRepository.javaLine Count: 10File Content:package com.RiskHunter.repository;

import com.RiskHunter.po.User;
import org.springframework.data.jpa.repository.JpaRepository;


public interface UserRepository extends JpaRepository<User, Integer> {
    User findByPhone(String phone);
    User findByPhoneAndPassword(String phone, String password);
}
================================================================================File Name: RiskSignalService.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\service\RiskSignalService.javaLine Count: 15File Content:package com.RiskHunter.service;

import com.RiskHunter.DTO.RiskSignalQueryDTO;
import com.RiskHunter.po.RiskSignal;
import com.RiskHunter.serviceImpl.RiskSignalServiceImpl;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.IService;

import java.time.LocalDateTime;

public interface RiskSignalService extends IService<RiskSignal> {
    public Page<RiskSignal> getByTimeRange(LocalDateTime start, LocalDateTime end, Integer page, Integer size);

    public Page<RiskSignal> advancedSearch(RiskSignalQueryDTO queryDTO) ;
}================================================================================File Name: UserService.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\service\UserService.javaLine Count: 13File Content:package com.RiskHunter.service;

import com.RiskHunter.vo.UserVO;

public interface UserService {
    Boolean register(UserVO userVO);

    String login(String phone,String password);

    UserVO getInformation();

    Boolean updateInformation(UserVO userVO);
}
================================================================================File Name: RiskSignalServiceImpl.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\serviceImpl\RiskSignalServiceImpl.javaLine Count: 48File Content:package com.RiskHunter.serviceImpl;/*
 * @date 02/23 18:03
 */

import com.RiskHunter.DTO.RiskSignalQueryDTO;
import com.RiskHunter.Mapper.RiskSignalMapper;
import com.RiskHunter.po.RiskSignal;
import com.RiskHunter.service.RiskSignalService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
@RequiredArgsConstructor
public class RiskSignalServiceImpl extends ServiceImpl<RiskSignalMapper, RiskSignal> implements RiskSignalService {

    @Override
    public Page<RiskSignal> getByTimeRange(LocalDateTime start, LocalDateTime end, Integer page, Integer size) {
        QueryWrapper<RiskSignal> wrapper = new QueryWrapper<>();
        if (start != null) {
            wrapper.ge("time", start);
        }
        if (end != null) {
            wrapper.le("time", end);
        }
        return page(new Page<>(page, size), wrapper);
    }
    @Override
    public Page<RiskSignal> advancedSearch(RiskSignalQueryDTO queryDTO) {
        return lambdaQuery()
                .ge(queryDTO.getMinEmp() != null, RiskSignal::getEmp, queryDTO.getMinEmp())
                .le(queryDTO.getMaxEmp() != null, RiskSignal::getEmp, queryDTO.getMaxEmp())
                .ge(queryDTO.getMinExchangeRate() != null, RiskSignal::getExchangeRate, queryDTO.getMinExchangeRate())
                .between(queryDTO.getStartTime() != null && queryDTO.getEndTime() != null,
                        RiskSignal::getTime, queryDTO.getStartTime(), queryDTO.getEndTime())
                .like(StringUtils.isNotBlank(queryDTO.getKeyword()), RiskSignal::getAnalysis, queryDTO.getKeyword())
                .orderByDesc(RiskSignal::getTime)
                .page(new Page<>(queryDTO.getPage(), queryDTO.getSize()));
    }


}================================================================================File Name: UserServiceImpl.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\serviceImpl\UserServiceImpl.javaLine Count: 70File Content:package com.RiskHunter.serviceImpl;

import com.RiskHunter.exception.RiskHunterException;
import com.RiskHunter.repository.UserRepository;
import com.RiskHunter.util.SecurityUtil;
import com.RiskHunter.util.TokenUtil;
import com.RiskHunter.vo.UserVO;
import com.RiskHunter.po.User;
import com.RiskHunter.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    UserRepository userRepository;
    
    @Autowired
    TokenUtil tokenUtil;

    @Autowired
    SecurityUtil securityUtil;


    @Override
    public Boolean register(UserVO userVO) {
        User user = userRepository.findByPhone(userVO.getPhone());
        if (user != null) {
            throw RiskHunterException.phoneAlreadyExists();
        }
        User newUser = userVO.toPO();
        userRepository.save(newUser);
        return true;
    }

    @Override
    public String login(String phone, String password) {
        User user = userRepository.findByPhoneAndPassword(phone, password);
        if (user == null) {
            throw RiskHunterException.phoneOrPasswordError();
        }
        return tokenUtil.getToken(user);
    }

    @Override
    public UserVO getInformation() {
        User user=securityUtil.getCurrentUser();
        return user.toVO();
    }

    @Override
    public Boolean updateInformation(UserVO userVO) {
        User user=securityUtil.getCurrentUser();
        if (userVO.getPassword()!=null){
            user.setPassword(userVO.getPassword());
        }
        if (userVO.getName()!=null){
            user.setName(userVO.getName());
        }
        if (userVO.getAddress()!=null){
            user.setAddress(userVO.getAddress());
        }
        userRepository.save(user);
        return true;
    }

}
================================================================================File Name: SecurityUtil.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\util\SecurityUtil.javaLine Count: 18File Content:package com.RiskHunter.util;

import com.RiskHunter.po.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;

@Component
public class SecurityUtil {

    @Autowired
    HttpServletRequest httpServletRequest;

    public User getCurrentUser(){
        return (User)httpServletRequest.getSession().getAttribute("currentUser");
    }
}
================================================================================File Name: TokenUtil.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\util\TokenUtil.javaLine Count: 54File Content:package com.RiskHunter.util;

import com.RiskHunter.repository.UserRepository;
import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.RiskHunter.po.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Date;

/**
 * @Author: DingXiaoyu
 * @Date: 0:28 2023/11/26
 * 这是一个token的工具类，
 * 设置了过期时间为1天。
 * getToken方法用来获取token，
 * token中包含了用户的Id、密码信息以及到期时间。
 * verifyToken方法用来检验token是否正确。
 * getUser方法用来从token中获得用户信息。
*/
@Component
public class TokenUtil {
    private static final long EXPIRE_TIME = 24 * 60 * 60 * 1000;

    @Autowired
    UserRepository userRepository;

    public String getToken(User user) {
        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);
        return JWT.create()
                .withAudience(String.valueOf(user.getId()))
                .withExpiresAt(date)
                .sign(Algorithm.HMAC256(user.getPassword()));
    }

    public boolean verifyToken(String token) {
        try {
            Integer userId=Integer.parseInt(JWT.decode(token).getAudience().get(0));
            User user= userRepository.findById(userId).get();
            JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(user.getPassword())).build();
            jwtVerifier.verify(token);
            return true;
        }catch (Exception e){
            return false;
        }
    }

    public User getUser(String token){
        Integer userId=Integer.parseInt(JWT.decode(token).getAudience().get(0));
        return userRepository.findById(userId).get();
    }
}
================================================================================File Name: ResultVO.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\vo\ResultVO.javaLine Count: 29File Content:package com.RiskHunter.vo;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.io.Serializable;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
public class ResultVO<T> implements Serializable {

    private String code;

    private String msg;

    private T result;

    public static <T> ResultVO<T> buildSuccess(T result) {
        return new ResultVO<T>("000", null, result);
    }

    public static <T> ResultVO<T> buildFailure(String msg) {
        return new ResultVO<T>("400", msg, null);
    }
}================================================================================File Name: UserVO.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\main\java\com\RiskHunter\vo\UserVO.javaLine Count: 39File Content:package com.RiskHunter.vo;

import com.RiskHunter.enums.RoleEnum;
import com.RiskHunter.po.User;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;

@Getter
@Setter
@NoArgsConstructor
public class UserVO {

    private Integer id;

    private String name;

    private String phone;

    private String password;

    private String address;

    private Integer role;


    public User toPO(){
        User user=new User();
        user.setId(this.id);
        user.setAddress(this.address);
        user.setName(this.name);
        user.setPhone(this.phone);
        user.setRole(this.role);
        user.setPassword(this.password);
        return user;
    }
}
================================================================================File Name: RiskHunterApplicationTests.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\test\java\com\RiskHunter\RiskHunterApplicationTests.javaLine Count: 23File Content:package com.RiskHunter;

import com.RiskHunter.util.TokenUtil;
import com.RiskHunter.po.User;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class RiskHunterApplicationTests {

	@Autowired
    TokenUtil tokenUtil;

	@Test
	void contextLoads() {
		User user=new User();
		user.setId(1);
		user.setPassword("123456");
		System.out.println(tokenUtil.getToken(user));
	}

}
================================================================================File Name: RiskSignalControllerTests.javaFile Path: C:\Users\HP\Desktop\大二下学期\花旗杯\RiskHunter\backend\src\test\java\com\RiskHunter\RiskSignalControllerTests.javaLine Count: 150File Content:package com.RiskHunter;/*
 * @date 02/23 18:54
 */


import com.RiskHunter.DTO.RiskSignalQueryDTO;
import com.RiskHunter.po.RiskSignal;
import com.RiskHunter.service.RiskSignalService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import static org.hamcrest.Matchers.*;
        import static org.junit.jupiter.api.Assertions.*;
        import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
        import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
public class RiskSignalControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private RiskSignalService riskSignalService;

    private RiskSignal testSignal;

    @BeforeEach
    void setUp() {
        // 初始化测试数据
        testSignal = new RiskSignal();
        testSignal.setAnalysis("Initial Test Analysis");
        testSignal.setEmp(1.0);
        testSignal.setExchangeRate(7.2);

        riskSignalService.save(testSignal);
    }

    @Test
    void createRiskSignal() throws Exception {
        RiskSignal newSignal = new RiskSignal();
        newSignal.setAnalysis("New Risk Analysis");
        newSignal.setEmp(1.5);
        newSignal.setExchangeRate(6.8);

        mockMvc.perform(post("/api/risk-signals")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(newSignal)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.analysis").value("New Risk Analysis"));

        // 验证数据库
        RiskSignal saved = riskSignalService.getById(newSignal.getId());
        assertNotNull(saved);
        assertEquals(1.5, saved.getEmp());
    }

    @Test
    void listRiskSignalsWithDefaultParams() throws Exception {
        mockMvc.perform(get("/api/risk-signals"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.current").value(1))
                .andExpect(jsonPath("$.data.size").value(10))
                .andExpect(jsonPath("$.data.records", hasSize(greaterThan(0))));
    }

    @Test
    void listRiskSignalsWithTimeRange() throws Exception {
        String startTime = LocalDateTime.now().minusDays(1).format(DateTimeFormatter.ISO_DATE_TIME);
        String endTime = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);

        mockMvc.perform(get("/api/risk-signals")
                        .param("startTime", startTime)
                        .param("endTime", endTime)
                        .param("page", "1")
                        .param("size", "5"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.records", hasSize(greaterThanOrEqualTo(1))));
    }

    @Test
    void updateRiskSignal() throws Exception {
        testSignal.setAnalysis("Updated Analysis");

        mockMvc.perform(put("/api/risk-signals/{id}", testSignal.getId())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(testSignal)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.analysis").value("Updated Analysis"));

        RiskSignal updated = riskSignalService.getById(testSignal.getId());
        assertEquals("Updated Analysis", updated.getAnalysis());
    }

    @Test
    void deleteRiskSignal() throws Exception {
        mockMvc.perform(delete("/api/risk-signals/{id}", testSignal.getId()))
                .andExpect(status().isOk());

        RiskSignal deleted = riskSignalService.getById(testSignal.getId());
        assertNull(deleted);
    }

    @Test
    void advancedSearch() throws Exception {
        RiskSignalQueryDTO queryDTO = new RiskSignalQueryDTO();
        queryDTO.setKeyword("Test");
        queryDTO.setMinEmp(0.5);
        queryDTO.setMaxEmp(1.5);
        queryDTO.setPage(1);
        queryDTO.setSize(10);

        mockMvc.perform(post("/api/risk-signals/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(queryDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.records", hasSize(greaterThan(0))));
    }

    @Test
    void advancedSearchWithDateRange() throws Exception {
        RiskSignalQueryDTO queryDTO = new RiskSignalQueryDTO();
        queryDTO.setStartTime(LocalDateTime.now().minusHours(1));
        queryDTO.setEndTime(LocalDateTime.now());
        queryDTO.setMinExchangeRate(7.0);
        queryDTO.setPage(1);
        queryDTO.setSize(10);

        mockMvc.perform(post("/api/risk-signals/search")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(queryDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.records[0].exchangeRate", greaterThanOrEqualTo(7.0)));
    }
}================================================================================Total Line Count: 1114Total File Count: 27